# Joins

Write and execute a SQL query to list the school names, community names and average attendance for communities with a hardship index of 98.

SELECT cps.NAME_OF_SCHOOL AS school_name, 
csd.COMMUNITY_AREA_NAME AS community_name, 
cps.AVERAGE_STUDENT_ATTENDANCE FROM chicago_public_schools 
cps JOIN chicago_socioeconomic_data csd ON 
cps.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER WHERE 
csd.HARDSHIP_INDEX = 98



Write and execute a SQL query to list all crimes that took place at a school. Include case number, crime type and community name.

SELECT 
    cc.CASE_NUMBER, 
    cc.PRIMARY_TYPE AS crime_type, 
    csd.COMMUNITY_AREA_NAME AS community_name
FROM 
    chicago_crime cc
JOIN 
    chicago_socioeconomic_data csd
ON 
    cc.COMMUNITY_AREA_NUMBER = csd.COMMUNITY_AREA_NUMBER
WHERE 
    cc.LOCATION_DESCRIPTION LIKE '%SCHOOL%';


# View

Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.
Column name in CHICAGO_PUBLIC_SCHOOLS	                                                                                                Column name in view
NAME_OF_SCHOOL	                                                                                                                      School_Name
Safety_Icon	                                                                                                                          Safety_Rating
Family_Involvement_Icon	                                                                                                              Family_Rating
Environment_Icon	                                                                                                                    Environment_Rating
Instruction_Icon	                                                                                                                    Instruction_Rating
Leaders_Icon	                                                                                                                        Leaders_Rating
Teachers_Icon	                                                                                                                        Teachers_Rating


CREATE VIEW School_Survey_View AS
SELECT 
    NAME_OF_SCHOOL AS School_Name,
    Safety_Icon AS Safety_Rating,
    Family_Involvement_Icon AS Family_Rating,
    Environment_Icon AS Environment_Rating,
    Instruction_Icon AS Instruction_Rating,
    Leaders_Icon AS Leaders_Rating,
    Teachers_Icon AS Teachers_Rating
FROM 
    chicago_public_schools;

Write and execute a SQL statement that returns all of the columns from the view.

SELECT * 
FROM School_Survey_View;


Write and execute a SQL statement that returns just the school name and leaders rating from the view.

SELECT 
    School_Name, 
    Leaders_Rating
FROM 
    School_Survey_View;


# Creating a Stored Procedure

Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID;
END //

DELIMITER ;


Inside your stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID;
END //

DELIMITER ;


Inside your stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.
Score lower limit	                   Score upper limit	                       Icon
80	                                        99	                               Very strong
60	                                        79	                               Strong
40	                                        59	                               Average
20	                                        39	                               Weak
0	                                          19	                               Very weak


DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    IF in_Leader_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = in_School_ID;
    END IF;
END //

DELIMITER ;


Run your code to create the stored procedure.

DROP PROCEDURE IF EXISTS UPDATE_LEADERS_SCORE;

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    IF in_Leader_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = in_School_ID;
    END IF;
END //

DELIMITER ;

And to update a school:

CALL UPDATE_LEADERS_SCORE(1010, 73);

Write a query to call the stored procedure, passing a valid school ID and a leader score of 50, to check that the procedure works as expected.

CALL UPDATE_LEADERS_SCORE(1010, 50);



# Using Transactions

Update your stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories.

DROP PROCEDURE IF EXISTS UPDATE_LEADERS_SCORE;

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    START TRANSACTION;
    
    IF in_Leader_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = in_School_ID;
    ELSEIF in_Leader_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = in_School_ID;
    ELSE
        -- If score is invalid, rollback
        ROLLBACK;
    END IF;
    
    COMMIT;
END //

DELIMITER ;


CALL UPDATE_LEADERS_SCORE(1010, 75);


Update your stored procedure definition again. Add a statement to commit the current unit of work at the end of the procedure.

DROP PROCEDURE IF EXISTS UPDATE_LEADERS_SCORE;

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    START TRANSACTION;
    
    IF in_Leader_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;

END //

DELIMITER ;

CALL UPDATE_LEADERS_SCORE(1010, 55);



Run your code to replace the stored procedure.

DROP PROCEDURE IF EXISTS UPDATE_LEADERS_SCORE;

DELIMITER //

CREATE PROCEDURE UPDATE_LEADERS_SCORE(
    IN in_School_ID INT,
    IN in_Leader_Score INT
)
BEGIN
    START TRANSACTION;
    
    IF in_Leader_Score BETWEEN 80 AND 99 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very strong'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 60 AND 79 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Strong'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 40 AND 59 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Average'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 20 AND 39 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Weak'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSEIF in_Leader_Score BETWEEN 0 AND 19 THEN
        UPDATE chicago_public_schools
        SET Leaders_Icon = 'Very weak'
        WHERE School_ID = in_School_ID;
        COMMIT;
    ELSE
        ROLLBACK;
    END IF;

END //

DELIMITER ;



Write and run one query to check that the updated stored procedure works as expected when you use a valid score of 38.

CALL UPDATE_LEADERS_SCORE(1010, 38);

To check if it updated correctly, run:

SELECT 
    School_ID,
    Leaders_Score,
    Leaders_Icon
FROM 
    chicago_public_schools
WHERE 
    School_ID = 1010;



Write and run another query to check that the updated stored procedure works as expected when you use an invalid score of 101.

CALL UPDATE_LEADERS_SCORE(1010, 101);

To Verify:

SELECT 
    School_ID,
    Leaders_Score,
    Leaders_Icon
FROM 
    chicago_public_schools
WHERE 
    School_ID = 1010;

Full Flow:

-- Call procedure with invalid score
CALL UPDATE_LEADERS_SCORE(1010, 101);

-- Check if anything changed
SELECT 
    School_ID,
    Leaders_Score,
    Leaders_Icon
FROM 
    chicago_public_schools
WHERE 
    School_ID = 1010;








